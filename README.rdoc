= Strong Parameters

With this plugin Action Controller parameters are forbidden to be used in Active Model mass assignments until they have been whitelisted. This means you'll have to make a conscious choice about which attributes to allow for mass updating and thus prevent accidentally exposing that which shouldn't be exposed.

In addition, parameters can be marked as required and flow through a predefined raise/rescue flow to end up as a 400 Bad Request with no effort.

    class PeopleController < ActionController::Base
      # This will raise an ActiveModel::ForbiddenAttributes exception because it's using mass assignment
      # without an explicit permit step.
      def create
        Person.create(params[:person])
      end
      
      # This will pass with flying colors as long as there's a person key in the parameters, otherwise
      # it'll raise a ActionController::MissingParameter exception, which will get caught by 
      # ActionController::Base and turned into that 400 Bad Request reply.
      def update
        redirect_to current_account.people.find(params[:id]).tap do |person|
          person.update_attributes!(person_params)
        end
      end
      
      private
        # Using a private method to encapsulate the permissible parameters is just a good pattern
        # since you'll be able to reuse the same permit list between create and update. Also, you
        # can specialize this method with per-user checking of permissible attributes.
        def person_params
          params.require(:person).permit(:name, :age)
        end
    end

You can also use permit on nested parameters, like:

    params.permit(:name, friends: [ :name, { family: [ :name ] }])

Thanks to Nick Kallen for the permit idea!

You can also easily permit similarly named parameters using regular expressions:

    params.permit(/^company_\d$/ => [:name, :location, /^quarter_\d_profit$/])

== Todos

* Automatically permit parameters coming from a signed form [Yehuda]

== Compatibility

Due to a testing issue, this plugin is only fully compatible with rails/3-2-stable rev 275ee0dc7b and forward as well as rails/master rev b49a7ddce1 and forward.